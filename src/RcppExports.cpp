// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// createQueueElement
Rcpp::XPtr<QueueElement> createQueueElement(float priority, Rcpp::RObject additionalInfo);
RcppExport SEXP _XDS_createQueueElement(SEXP prioritySEXP, SEXP additionalInfoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type priority(prioritySEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type additionalInfo(additionalInfoSEXP);
    rcpp_result_gen = Rcpp::wrap(createQueueElement(priority, additionalInfo));
    return rcpp_result_gen;
END_RCPP
}
// getQueueElementInfo
Rcpp::List getQueueElementInfo(Rcpp::XPtr<QueueElement> x);
RcppExport SEXP _XDS_getQueueElementInfo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<QueueElement> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getQueueElementInfo(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XDS_createQueueElement", (DL_FUNC) &_XDS_createQueueElement, 2},
    {"_XDS_getQueueElementInfo", (DL_FUNC) &_XDS_getQueueElementInfo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_XDS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
